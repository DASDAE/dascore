# This action renders and publishes the development docs whenever
# new commits are added to the master bracnh.

name: BuildDeployDevDocs

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  deployments: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "get tags"
        run: |
          git fetch --tags --force # Retrieve annotated tags.

      - uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: '1.5.8-0' # versions: https://github.com/mamba-org/micromamba-releases
          environment-file: ./.github/doc_environment.yml
          init-shell: >-
            bash
            powershell
          cache-environment: true
          post-cleanup: 'all'

      # Not sure why this is needed but it appears to be the case
      - name: fix env
        shell: bash -l {0}
        run: | 
          micromamba shell init --shell bash --root-prefix=~/micromamba
          eval "$(micromamba shell hook --shell bash)"
          micromamba activate dascore

      - name: install dascore with docbuild reqs
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pandoc
          python -m pip install -e .[docs,all]

      - name: Install quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.3.450
          tinytex: true

      - name: print quarto version
        run: |
          quarto --version

      - name: render API docs
        shell: bash -l {0}
        run: |
          python scripts/build_api_docs.py

      - name: publish docs to netlify
        shell: bash -l {0}
        env:
          QUARTO_PRINT_STACK: true
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        run: |
            quarto publish docs --no-prompt --no-browser
