---
execute:
    warning: false
---

{{< include ../readme.md >}}

:::{.callout minimal="true"}
Version-specific documentation builds are attached to the [release pages](https://github.com/DASDAE/dascore/releases).
:::

# Highlights

DASCore is a Python library for distributed acoustic sensing (DAS). It provides:

1. IO support for various DAS data formats
2. Common processing routines
3. Basic visualizations

:::{.callout-note}
DASCore is a foundational package of the [DAS Data Analysis Ecosystem (DASDAE)](https://dasdae.org). It facilitates rapid development of other DASDAE packages that do more specialized analysis/visualization.
:::

# Supported file formats
```{python}
#| echo: false
#| output: asis
import pandas as pd
from dascore.io.core import FiberIO
out_str = FiberIO.get_supported_io_table().replace(True, value='✅').replace(False, value='❌').to_markdown(index=False, stralign="center")

out_str += '\n: {.striped}'
print(out_str)
```

# Introductory usage

## Read a file

```{python}
import dascore as dc
from dascore.utils.downloader import fetch

# get a path to an example file, replace with your path
file_path = fetch('terra15_das_1_trimmed.hdf5')

spool = dc.spool(file_path)
patch = spool[0]
```

## Working with a directory of DAS files

```{python}
#| output: false
import dascore as dc
from dascore.utils.downloader import fetch

# get a path to a directory of das files, replace with your path
directory_path = fetch('terra15_das_1_trimmed.hdf5').parent

spool = (
    # Create a spool to interact with directory data
    dc.spool(directory_path)
    # Index the directory contents
    .update()
    # Sub-select a specific time range
    .select(time_min=('2020-01-01', ...))
    # Specify chunk of the output patches
    .chunk(time=60, overlap=10)
)
```

## Get patches (array w/ metadata)

```{python}
import dascore as dc

spool = dc.get_example_spool('diverse_das')

# Spools are like lists, you can get patches through iteration
for patch in spool:
    ...

# or through indexing
patch = spool[0]
```

## Perform processing

```{python}
import dascore as dc

patch = dc.get_example_patch('random_das')

out = (
    # Decimate along time axis (keep every 8th sample)
    patch.decimate(time=8)
    # Detrend along the distance dimension
    .detrend(dim='distance') 
    # Apply 10Hz low-pass filter along time dimension
    .pass_filter(time=(..., 10))
)
```

## Visualize

```{python}
import dascore as dc

patch = dc.get_example_patch('example_event_2')

patch.viz.waterfall(show=True, scale=0.2);
```

# Installation

Use pip or conda to install DASCore:

```bash
pip install dascore
```

```bash
conda install dascore -c conda-forge
```

See [this recipe](recipes/docker_basic.qmd) for installation with Docker.

See the [contributing docs](contributing/contributing.qmd) for development installations.

Please note that there is currently a fix in progress for the dependency issue with segyio,
which does not yet support Python 3.13, so that segyio will be an optional dependency. For
the time being, please use Python 3.12 for the environment. 

# Feedback and Support

Use the [project discussions](https://github.com/DASDAE/dascore/discussions) to ask a question.

Use the [project issues](https://github.com/DASDAE/dascore/issues) to report an issue.
