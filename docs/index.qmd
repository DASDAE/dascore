---
title: DASCore
execute:
    warning: false
---

A python library for distributed fiber optic sensing.

[![coverage](https://codecov.io/gh/dasdae/dascore/branch/master/graph/badge.svg)](https://codecov.io/gh/dasdae/dascore)
[![PyPI Version](https://img.shields.io/pypi/v/dascore.svg)](https://pypi.python.org/pypi/dascore)
[![supported versions](https://img.shields.io/pypi/pyversions/dascore.svg?label=python_versions)](https://pypi.python.org/pypi/dascore)
[![PyPI Downloads](https://img.shields.io/pypi/dm/dascore.svg?label=pypi)](https://pypi.org/project/dascore/)
[![Conda Downloads](https://img.shields.io/conda/dn/conda-forge/dascore.svg?label=conda)](https://github.com/conda-forge/dascore-feedstock)
[![DOI](https://zenodo.org/badge/422627477.svg)](https://zenodo.org/badge/latestdoi/422627477)
[![Licence](https://www.gnu.org/graphics/lgplv3-88x31.png)](https://www.gnu.org/licenses/lgpl.html)


[Code](https://github.com/DASDAE/dascore)

Documentation [[stable](https://dascore.org), [development](https://dascore.quarto.pub/dascore/)]


:::{.callout minimal="true"}
Version-specific documentation builds are attached to the [release pages](https://github.com/DASDAE/dascore/releases).
:::

# Highlights

DASCore is a Python library for distributed acoustic sensing (DAS). It provides:

1. IO support for various DAS data formats
2. Common processing routines
3. Basic visualizations

:::{.callout-note}
DASCore is a foundational package of the [DAS Data Analysis Ecosystem (DASDAE)](https://dasdae.org). It facilitates rapid development of other DASDAE packages that do more specialized analysis/visualization.
:::

# Supported file formats
```{python}
#| echo: false
import pandas as pd
from dascore.io.core import FiberIO
FiberIO.get_supported_io_table().replace(True, value='✅').replace(False, value='❌')
```

# Introductory usage

## Read a file

```{python}
import dascore as dc
from dascore.utils.downloader import fetch

# get a path to an example file, replace with your path
file_path = fetch('terra15_das_1_trimmed.hdf5')

spool = dc.spool(file_path)
patch = spool[0]
```

## Working with a directory of DAS files

```{python}
#| output: false
import dascore as dc
from dascore.utils.downloader import fetch

# get a path to a directory of das files, replace with your path
directory_path = fetch('terra15_das_1_trimmed.hdf5').parent

spool = (
    # Create a spool to interact with directory data
    dc.spool(directory_path)
    # Index the directory contents
    .update()
    # Sub-select a specific time range
    .select(time_min=('2020-01-01', ...))
    # Specify chunk of the output patches
    .chunk(time=60, overlap=10)
)
```

## Get patches (array w/ metadata)

```{python}
import dascore as dc

spool = dc.get_example_spool('diverse_das')

# Spools are like lists, you can get patches through iteration
for patch in spool:
    ...

# or through indexing
patch = spool[0]
```

## Perform processing

```{python}
import dascore as dc

patch = dc.get_example_patch('random_das')

out = (
    # Decimate along time axis (keep every 8th sample)
    patch.decimate(time=8)
    # Detrend along the distance dimension
    .detrend(dim='distance') 
    # Apply 10Hz low-pass filter along time dimension
    .pass_filter(time=(..., 10))
)
```

## Visualize

```{python}
import dascore as dc

patch = dc.get_example_patch('example_event_2')

patch.viz.waterfall(show=True, scale=0.2);
```

# Installation

Use pip or conda to install DASCore:

```bash
pip install dascore
```

```bash
conda install dascore -c conda-forge
```

See [this recipe](recipes/docker_basic.qmd) for installation with Docker.

See the [contributing docs](contributing/contributing.qmd) for development installations.

# Feedback and Support

Use the [project discussions](https://github.com/DASDAE/dascore/discussions) to ask a question.

Use the [project issues](https://github.com/DASDAE/dascore/issues) to report an issue.
