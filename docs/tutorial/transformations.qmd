---
title: Transformations
execute:
  warning: false
---

In DASCore, transformations are operations which change the units of a patch. Transforms can be found in the [transform module](`dascore.transform`) or access as `Patch` methods.

# Discrete Fourier Transforms

The [Discrete Fourier Transform](https://en.wikipedia.org/wiki/Discrete_Fourier_transform) (dft) is commonly used in many signal processing workflows. DASCore implements this as the [dft](`dascore.transform.fourier.dft`) patch method.

```{python}
import numpy as np
import dascore as dc

# Get example patch, set unit to velocity (for demonstration)
patch = dc.get_example_patch().set_units("m/s")

transformed = patch.dft(dim="time")

# Note how the dimension name has changed
print(f"old_dims: {patch.dims} new dims: {transformed.dims}")

# As have the units
old_units = patch.attrs.data_units
new_units = transformed.attrs.data_units
print(f"old units: {old_units}, new units: {new_units}")
```

:::{.callout-note}
The transformed dimension names change; "time" becomes "ft_time" indicating the domain of the dimension has changed. The units are also updated. See the [note on Fourier transforms in DASCore](../notes/dft_notes.qmd) for more details.
:::

In many cases, it is advantageous to only calculate the fourier transform corresponding to the positive frequencies (since the Fourier transform of a real signal is symmetric).

```{python}
# Transform distance axis to Fourier domain using real fourier transform
real_transform = patch.dft(dim='distance', real=True)
print(real_transform.get_coord("ft_distance"))
```

The Inverse Discrete Fourier Transform [idft](`dascore.transform.fourier.idft`) undoes the transformation.

```{python}
# Transform back to time domain, take only real component.
patch_2 = transformed.idft().real()
assert np.allclose(patch_2.data, patch.data)
```
